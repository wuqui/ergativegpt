# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_config.ipynb.

# %% auto 0
__all__ = ['ExperimentConfig', 'load_config']

# %% ../nbs/03_config.ipynb 3
import yaml
from pathlib import Path
from typing import Dict, Any, Union
from dataclasses import dataclass

# %% ../nbs/03_config.ipynb 4
@dataclass
class ExperimentConfig:
    """Configuration for a linguistic annotation experiment."""
    name: str
    date: str
    description: str
    input_dir: str
    pattern: str
    prompt_file: str
    output_dir: str
    model_provider: str
    model_name: str
    target_verb: str = None
    target_file: str = None
    batch_size: int = 10
    max_retries: int = 3
    metrics_config: Dict[str, Dict[str, str]] = None

# %% ../nbs/03_config.ipynb 5
def load_config(config_path: Union[str, Path]) -> ExperimentConfig:
    """Load experiment configuration from a YAML file.
    
    Args:
        config_path: Path to the YAML configuration file
        
    Returns:
        ExperimentConfig object with loaded settings
    """
    with open(config_path, 'r') as f:
        config_data = yaml.safe_load(f)
    
    # Flatten nested structure
    experiment = config_data['experiment']
    data = config_data['data']
    output = config_data['output']
    model = config_data['model']
    processing = config_data.get('processing', {})
    metrics = config_data.get('metrics', {})
    
    return ExperimentConfig(
        name=experiment['name'],
        date=experiment['date'],
        description=experiment['description'],
        input_dir=data['input_dir'],
        pattern=data['pattern'],
        prompt_file=data['prompt_file'],
        output_dir=output['dir'],
        model_provider=model['provider'],
        model_name=model['name'],
        target_verb=processing.get('target_verb'),
        target_file=processing.get('target_file'),
        batch_size=processing.get('batch_size', 10),
        max_retries=processing.get('max_retries', 3),
        metrics_config=metrics.get('variables', {})
    )
